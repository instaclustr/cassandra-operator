# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
        auth:
          username: _json_key
          password: $GOOGLE_AUTH
    
    working_directory: ~/cassandra-operator

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    
    steps:
      - checkout

      - run: cd java && mvn -q package -Dgroups=basic

      - store_test_results:
          path: operator/target/surefire-reports

  release-dev:
    docker:
      # specify the version you desire here
      - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
        auth:
          username: _json_key
          password: $GOOGLE_AUTH

    working_directory: ~/cassandra-operator

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      - run:
          name: Setup Google Cloud
          command: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json && gcloud --quiet config set project ${GOOGLE_PROJECT_ID} && gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run: cd java && mvn -q install -Dgroups=basic

      - store_test_results:
          path: operator/target/surefire-reports

      - setup_remote_docker

      - run:
          name: Create Docker image
          command: ./buildenv/build-all

      - run:
          name: Release docker images
          command: ./buildenv/release-all

  test-pivotal:
        docker:
              # specify the version you desire here
              - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
                auth:
                  username: _json_key
                  password: $GOOGLE_AUTH

        working_directory: ~/cassandra-operator

        environment:
              # Customize the JVM maximum heap limit
          MAVEN_OPTS: -Xmx3200m

        steps:
          - checkout

          - run:
              name: Dump Pivotal kube config
              command: mkdir -p ${HOME}/.kube/ && echo ${PIVOTAL_KUBECTL} | base64 -d > ${HOME}/.kube/config

          - run:
              name: Run integration tests
              command: ./test/pivotaltests

          - run:
              name: Cleanup Pivotal resources
              command: ./test/cleanup
              when: always

  test-gcp:
    docker:
          # specify the version you desire here
          - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
            auth:
              username: _json_key
              password: $GOOGLE_AUTH

    working_directory: ~/cassandra-operator

    environment:
          # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      - run:
          name: Setup Google Cloud
          command: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json && gcloud --quiet config set project ${GOOGLE_PROJECT_ID} && gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run:
          name: Setup K8s cluster and Credentials
          command: gcloud --quiet container clusters create ${K8S_CLUSTER_NAME} && gcloud --quiet container clusters get-credentials ${K8S_CLUSTER_NAME}

      - run:
          name: Set up helm
          command: ./test/configurehelm

      - run:
          name: Deploy Operator
          command: ./test/deployoperator && sleep 30

      - run:
          name: Run integration tests
          command: export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json; ./test/gcptests

      - run:
          name: Cleanup GCP resources
          command: gcloud --quiet container clusters delete ${K8S_CLUSTER_NAME} --async
          when: always
workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
      - test-gcp:
          requires:
            - release-dev
      #- test-pivotal:
      #    requires:
      #      - release-dev
      - release-dev:
          filters:
            branches:
              only:
                - master
